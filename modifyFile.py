# this file will modify the result file generated by gromac
# to the form of the following:
# time  x  y  z
# 0    0   0   0

# fileName="msdRes.txt"

import os
OverwriteOld = False
def lenNotEqual(x,y,z):
    return len(x) != len(y) or len(y) != len(z) or len(x) != len(z)

def minElem(x,y,z):
    if (x < y):
        if ( x < z):
            return x
        else:
            return z
    else:
        if (y < z):
            return y
        else:
            return z
def minLen(x,y,z):
    """
    find out the minimum length of the three containers
    """
    L1 = len(x)
    L2 = len(y)
    L3 = len(z)
    return minElem(L1,L2,L3)

def createDir(dirName):
    """
    create a diretory if it does not exist

    """
    if not os.path.exists(dirName):
        os.makedirs(dirName)

def modifyMSD(readFilePath, writeFilePath):
    timeArr = []
    xMSD = []
    yMSD = []
    zMSD = []
    # indicate what is the turn, x, y, z?
    turn = 0
    with open(readFilePath, 'r') as msdFile:
        for line in msdFile:
            if (line[0] == "@" or line[0] == "#"):
                # print("starts with @ or #")
                continue
            line = line.split()
            if (len(line) >= 2):
                if (turn == 0):
                    timeArr.append(line[0])
                    xMSD.append(line[1])
                elif(turn == 1):
                    # y turn
                    yMSD.append(line[1])
                else:
                    zMSD.append(line[1])
            else:
                turn += 1
    
    if (lenNotEqual(xMSD,yMSD,zMSD)):
        print("length of the msd array not equal!")
        # need to modify
        print("Set the size to the minimum length")
        indexLen = minLen(xMSD,yMSD,zMSD)
    else:
        indexLen = len(xMSD)

    with open(writeFilePath, 'w') as writeFile:
        # writeFile.write("%20s %20s %20s %20s\n" %("time", "MSD_x", "MSD_y" , "MSD_z"))
        writeFile.write("%s,%s,%s,%s\n"%("time", "MSD_x", "MSD_y" , "MSD_z"))
        for i in range(indexLen):
            # writeFile.write("%20s %20s %20s %20s\n" %(timeArr[i], xMSD[i], yMSD[i],zMSD[i]))
            writeFile.write("%s,%s,%s,%s\n" %(timeArr[i], xMSD[i], yMSD[i],zMSD[i]))

def generateMSDFinal(readDataFileParentPath, writeDataFileParentPath):
    """
    Generate the final msd files

    ------
    Parameters
    -------

    readDataFileParentPath: str
    read data file path,  e.g., "DATA/DOPC100"

    writeDataParentPath: str
    write data file path e.g., "MSD_Analysis/DOPC100"

    """
    filePath = os.path.join(readDataFileParentPath,"MSD_DATA_CAMMP")
    # os.chdir(filePath)
    # iterate each sub directory
    for root, dirs, _ in os.walk(filePath):
        for dir in dirs:
            writePath = os.path.join(writeDataFileParentPath,dir)
            # print("current writePath :" + writePath)
            # mkdir if folder not existing
            createDir(writePath)
            # os.chdir(dir)
            # process the msd file
            currentPath = os.path.join(filePath, dir)
            # print("currentPath:" + currentPath)
            for file in os.listdir(currentPath):
                if file.endswith(".xvg"):
                    index= file.find('.')
                    fileName = file[0:index]
                    index2 = fileName.rfind('_')
                    fileName = fileName[index2+1:]
                    writeMSDPath = os.path.join(writePath,fileName+".csv")
                    # print("The writeMSDPath:" + writeMSDPath)
                    
                    #check if file already exists:
                    if ( OverwriteOld == True or (not os.path.isfile(writeMSDPath))):
                        modifyMSD(os.path.join(currentPath,file), writeMSDPath)
            # os.chdir("..")
        
def outFinalMSD(pathToData):
    """
    -----
    Parameters
    -----

    pathToData: str
    the folder path to the folder Data
    """
    folders = ["POPC75_CHOL25","DOPC100","DOPC75_CHOL25","DOPC50_CHOL50","POPC100","POPC50_CHOL50"]
    # folders = ["DOPC100"]
    readFolderNames = [os.path.join(pathToData,"DATA",var) for var in folders]
    writeFolderNames = [os.path.join(pathToData,"MSD_Analysis", var) for var in folders]
    for rFN, wFN in zip(readFolderNames, writeFolderNames):
        generateMSDFinal(rFN, wFN)



if __name__ == "__main__" :
    script_dir = os.path.dirname(os.path.realpath(__file__))
    # os.chdir(script_dir)
    # readFilePath = "msdRes.txt"
    # writeFilePath = "result.txt"
    # modifyMSD(readFilePath,writeFilePath)
    outFinalMSD(script_dir)